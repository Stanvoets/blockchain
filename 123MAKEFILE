PACKAGES_NOSIMULATION=$(shell go list ./... | grep -v '/simulation')
PACKAGES_SIMTEST=$(shell go list ./... | grep '/simulation')
VERSION := $(shell echo $(shell git describe --tags) | sed 's/^v//')
COMMIT := $(shell git log -1 --format='%H')
CAT := $(if $(filter $(OS),Windows_NT),type,cat)
LEDGER_ENABLED ?= true
GOTOOLS = \
	github.com/golang/dep/cmd/dep \
	github.com/alecthomas/gometalinter \
	github.com/rakyll/statik
GOBIN ?= $(GOPATH)/bin

# process build tags

build_tags = netgo
ifeq ($(LEDGER_ENABLED),true)
  ifeq ($(OS),Windows_NT)
    GCCEXE = $(shell where gcc.exe 2> NUL)
    ifeq ($(GCCEXE),)
      $(error gcc.exe not installed for ledger support, please install or set LEDGER_ENABLED=false)
    else
      build_tags += ledger
    endif
  else
    UNAME_S = $(shell uname -s)
    ifeq ($(UNAME_S),OpenBSD)
      $(warning OpenBSD detected, disabling ledger support (https://github.com/cosmos/cosmos-sdk/issues/1988))
    else
      GCC = $(shell command -v gcc 2> /dev/null)
      ifeq ($(GCC),)
        $(error gcc not installed for ledger support, please install or set LEDGER_ENABLED=false)
      else
        build_tags += ledger
      endif
    endif
  endif
endif

ifeq ($(WITH_CLEVELDB),yes)
  build_tags += gcc
endif
build_tags += $(BUILD_TAGS)
build_tags := $(strip $(build_tags))

# process linker flags
ldflags = -X github.com/cosmos/cosmos-sdk/version.Version=$(VERSION) \
	-X github.com/cosmos/cosmos-sdk/version.Commit=$(COMMIT) \
  -X github.com/cosmos/cosmos-sdk/version.VendorDirHash=$(shell $(CAT) ) \
  -X "github.com/cosmos/cosmos-sdk/version.BuildTags=$(build_tags)"

ifeq ($(WITH_CLEVELDB),yes)
  ldflags += -X github.com/cosmos/cosmos-sdk/types.DBBackend=cleveldb
endif
ldflags += $(LDFLAGS)
ldflags := $(strip $(ldflags))

BUILD_FLAGS := -tags "$(build_tags)" -ldflags '$(ldflags)'

all: devtools install test_lint test

########################################
### CI

ci: devtools install test_cover test_lint test

########################################
### Build/Install

build:
ifeq ($(OS),Windows_NT)
	go build $(BUILD_FLAGS) -o build/bcnad.exe ./cmd/bcna/cmd/bcnad
	go build $(BUILD_FLAGS) -o build/bcnacli.exe ./cmd/bcna/cmd/bcnacli
else
	go build $(BUILD_FLAGS) -o build/bcnad ./cmd/bcna/cmd/bcnad
	go build $(BUILD_FLAGS) -o build/bcnacli ./cmd/bcna/cmd/bcnacli
	go build $(BUILD_FLAGS) -o build/bcnareplay ./cmd/bcna/cmd/bcnareplay
	go build $(BUILD_FLAGS) -o build/bcnakeyutil ./cmd/bcna/cmd/bcnakeyutil
endif

build-linux: vendor-deps
	LEDGER_ENABLED=false GOOS=linux GOARCH=amd64 $(MAKE) build

update_bcna_lite_docs:
	@statik -src=client/lcd/swagger-ui -dest=client/lcd -f

install: vendor-deps check-ledger update_bcna_lite_docs
	go install $(BUILD_FLAGS) ./cmd/bcna/cmd/bcnad
	go install $(BUILD_FLAGS) ./cmd/bcna/cmd/bcnacli
	go install $(BUILD_FLAGS) ./cmd/bcna/cmd/bcnareplay
	go install $(BUILD_FLAGS) ./cmd/bcna/cmd/bcnakeyutil